{
  "{\"assumptions\":{},\"sourceRoot\":\"/Users/edwardsotelojr/Library/Mobile Documents/com~apple~CloudDocs/Juice Houston/juice-houston-backend/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/edwardsotelojr/Library/Mobile Documents/com~apple~CloudDocs/Juice Houston/juice-houston-backend\",\"filename\":\"/Users/edwardsotelojr/Library/Mobile Documents/com~apple~CloudDocs/Juice Houston/juice-houston-backend/index.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/edwardsotelojr/Library/Mobile Documents/com~apple~CloudDocs/Juice Houston/juice-houston-backend\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.13.15": {
    "metadata": {},
    "options": {
      "assumptions": {},
      "sourceRoot": "/Users/edwardsotelojr/Library/Mobile Documents/com~apple~CloudDocs/Juice Houston/juice-houston-backend/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/edwardsotelojr/Library/Mobile Documents/com~apple~CloudDocs/Juice Houston/juice-houston-backend",
      "filename": "/Users/edwardsotelojr/Library/Mobile Documents/com~apple~CloudDocs/Juice Houston/juice-houston-backend/index.js",
      "targets": {},
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "browserslistConfigFile": false,
      "envName": "development",
      "root": "/Users/edwardsotelojr/Library/Mobile Documents/com~apple~CloudDocs/Juice Houston/juice-houston-backend",
      "rootMode": "root",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/edwardsotelojr/Library/Mobile Documents/com~apple~CloudDocs/Juice Houston/juice-houston-backend/index.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/edwardsotelojr/Library/Mobile Documents/com~apple~CloudDocs/Juice Houston/juice-houston-backend/index.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/edwardsotelojr/Library/Mobile Documents/com~apple~CloudDocs/Juice Houston/juice-houston-backend/",
        "sourceFileName": "index.js"
      }
    },
    "ast": null,
    "code": "/*\nconst key = require('./keys.js');\nconst authRouter = require(\"./routes/auth\");\nconst express = require(\"express\");\nconst bodyParser = require(\"body-parser\");\nconst cors = require(\"cors\");\nconst mongoose = require(\"mongoose\");\nconst passport = require('passport');\nconst app = express();\nconst PORT = 8000;\n\napp.use(cors());\napp.use(express.json());\n// root\n// mongo password: pegvI3-puxnok-wymmuc\nmongoose.connect(key.MONGO_URI, {\n  useNewUrlParser: true,\n  useCreateIndex: true,\n  useUnifiedTopology: true,\n}).then(() => {\n  console.log(\"Mongoose Connected. \");\n});\n\nconst connection = mongoose.connection;\n\nconnection.once(\"open\", function () {\n  console.log(\"MongoDB datebase connection established successfully\");\n});\napp.use(\"/\", authRouter);\napp.listen(PORT, () => {\n  console.log(\"Server is running on Port: \" + PORT);\n});\n*/\nimport express from 'express';\nimport mongoose from 'mongoose';\nimport key from './keys.js';\nimport authRouter from './routes/auth.js';\nconst app = express();\nconst PORT = 8000;\nmongoose.connect(key.MONGO_URI, {\n  useNewUrlParser: true,\n  useCreateIndex: true,\n  useUnifiedTopology: true\n}).then(() => {\n  console.log(\"Connected\");\n}).catch(err => console.log(\"error\", err));\napp.use(express.json());\napp.use(\"/\", authRouter);\napp.listen(PORT, () => {\n  console.log(`Server started on `);\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImV4cHJlc3MiLCJtb25nb29zZSIsImtleSIsImF1dGhSb3V0ZXIiLCJhcHAiLCJQT1JUIiwiY29ubmVjdCIsIk1PTkdPX1VSSSIsInVzZU5ld1VybFBhcnNlciIsInVzZUNyZWF0ZUluZGV4IiwidXNlVW5pZmllZFRvcG9sb2d5IiwidGhlbiIsImNvbnNvbGUiLCJsb2ciLCJjYXRjaCIsImVyciIsInVzZSIsImpzb24iLCJsaXN0ZW4iXSwibWFwcGluZ3MiOiJBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU9BLE9BQVAsTUFBb0IsU0FBcEI7QUFDQSxPQUFPQyxRQUFQLE1BQXFCLFVBQXJCO0FBQ0EsT0FBT0MsR0FBUCxNQUFnQixXQUFoQjtBQUNBLE9BQU9DLFVBQVAsTUFBdUIsa0JBQXZCO0FBRUEsTUFBTUMsR0FBRyxHQUFHSixPQUFPLEVBQW5CO0FBQ0EsTUFBTUssSUFBSSxHQUFHLElBQWI7QUFFQUosUUFBUSxDQUFDSyxPQUFULENBQWlCSixHQUFHLENBQUNLLFNBQXJCLEVBQ0U7QUFDRUMsRUFBQUEsZUFBZSxFQUFFLElBRG5CO0FBRUVDLEVBQUFBLGNBQWMsRUFBRSxJQUZsQjtBQUdFQyxFQUFBQSxrQkFBa0IsRUFBRTtBQUh0QixDQURGLEVBTUdDLElBTkgsQ0FNUSxNQUFNO0FBQ1ZDLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLFdBQVo7QUFDRCxDQVJILEVBU0dDLEtBVEgsQ0FTVUMsR0FBRCxJQUFTSCxPQUFPLENBQUNDLEdBQVIsQ0FBWSxPQUFaLEVBQXFCRSxHQUFyQixDQVRsQjtBQVdFWCxHQUFHLENBQUNZLEdBQUosQ0FBUWhCLE9BQU8sQ0FBQ2lCLElBQVIsRUFBUjtBQUNBYixHQUFHLENBQUNZLEdBQUosQ0FBUSxHQUFSLEVBQWFiLFVBQWI7QUFFQUMsR0FBRyxDQUFDYyxNQUFKLENBQVdiLElBQVgsRUFBaUIsTUFBTTtBQUNyQk8sRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQWEsb0JBQWI7QUFDRCxDQUZEIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9lZHdhcmRzb3RlbG9qci9MaWJyYXJ5L01vYmlsZSBEb2N1bWVudHMvY29tfmFwcGxlfkNsb3VkRG9jcy9KdWljZSBIb3VzdG9uL2p1aWNlLWhvdXN0b24tYmFja2VuZC8iLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qXG5jb25zdCBrZXkgPSByZXF1aXJlKCcuL2tleXMuanMnKTtcbmNvbnN0IGF1dGhSb3V0ZXIgPSByZXF1aXJlKFwiLi9yb3V0ZXMvYXV0aFwiKTtcbmNvbnN0IGV4cHJlc3MgPSByZXF1aXJlKFwiZXhwcmVzc1wiKTtcbmNvbnN0IGJvZHlQYXJzZXIgPSByZXF1aXJlKFwiYm9keS1wYXJzZXJcIik7XG5jb25zdCBjb3JzID0gcmVxdWlyZShcImNvcnNcIik7XG5jb25zdCBtb25nb29zZSA9IHJlcXVpcmUoXCJtb25nb29zZVwiKTtcbmNvbnN0IHBhc3Nwb3J0ID0gcmVxdWlyZSgncGFzc3BvcnQnKTtcbmNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcbmNvbnN0IFBPUlQgPSA4MDAwO1xuXG5hcHAudXNlKGNvcnMoKSk7XG5hcHAudXNlKGV4cHJlc3MuanNvbigpKTtcbi8vIHJvb3Rcbi8vIG1vbmdvIHBhc3N3b3JkOiBwZWd2STMtcHV4bm9rLXd5bW11Y1xubW9uZ29vc2UuY29ubmVjdChrZXkuTU9OR09fVVJJLCB7XG4gIHVzZU5ld1VybFBhcnNlcjogdHJ1ZSxcbiAgdXNlQ3JlYXRlSW5kZXg6IHRydWUsXG4gIHVzZVVuaWZpZWRUb3BvbG9neTogdHJ1ZSxcbn0pLnRoZW4oKCkgPT4ge1xuICBjb25zb2xlLmxvZyhcIk1vbmdvb3NlIENvbm5lY3RlZC4gXCIpO1xufSk7XG5cbmNvbnN0IGNvbm5lY3Rpb24gPSBtb25nb29zZS5jb25uZWN0aW9uO1xuXG5jb25uZWN0aW9uLm9uY2UoXCJvcGVuXCIsIGZ1bmN0aW9uICgpIHtcbiAgY29uc29sZS5sb2coXCJNb25nb0RCIGRhdGViYXNlIGNvbm5lY3Rpb24gZXN0YWJsaXNoZWQgc3VjY2Vzc2Z1bGx5XCIpO1xufSk7XG5hcHAudXNlKFwiL1wiLCBhdXRoUm91dGVyKTtcbmFwcC5saXN0ZW4oUE9SVCwgKCkgPT4ge1xuICBjb25zb2xlLmxvZyhcIlNlcnZlciBpcyBydW5uaW5nIG9uIFBvcnQ6IFwiICsgUE9SVCk7XG59KTtcbiovXG5pbXBvcnQgZXhwcmVzcyBmcm9tICdleHByZXNzJztcbmltcG9ydCBtb25nb29zZSBmcm9tICdtb25nb29zZSc7XG5pbXBvcnQga2V5IGZyb20gJy4va2V5cy5qcyc7XG5pbXBvcnQgYXV0aFJvdXRlciBmcm9tICcuL3JvdXRlcy9hdXRoLmpzJztcblxuY29uc3QgYXBwID0gZXhwcmVzcygpO1xuY29uc3QgUE9SVCA9IDgwMDA7XG5cbm1vbmdvb3NlLmNvbm5lY3Qoa2V5Lk1PTkdPX1VSSSxcbiAge1xuICAgIHVzZU5ld1VybFBhcnNlcjogdHJ1ZSxcbiAgICB1c2VDcmVhdGVJbmRleDogdHJ1ZSxcbiAgICB1c2VVbmlmaWVkVG9wb2xvZ3k6IHRydWVcbiAgfSlcbiAgLnRoZW4oKCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKFwiQ29ubmVjdGVkXCIpO1xuICB9KVxuICAuY2F0Y2goKGVycikgPT4gY29uc29sZS5sb2coXCJlcnJvclwiLCBlcnIpKTtcblxuICBhcHAudXNlKGV4cHJlc3MuanNvbigpKTtcbiAgYXBwLnVzZShcIi9cIiwgYXV0aFJvdXRlcik7XG5cbiAgYXBwLmxpc3RlbihQT1JULCAoKSA9PiB7XG4gICAgY29uc29sZS5sb2coYFNlcnZlciBzdGFydGVkIG9uIGApO1xuICB9KTsiXX0=",
    "map": {
      "version": 3,
      "sources": [
        "index.js"
      ],
      "names": [
        "express",
        "mongoose",
        "key",
        "authRouter",
        "app",
        "PORT",
        "connect",
        "MONGO_URI",
        "useNewUrlParser",
        "useCreateIndex",
        "useUnifiedTopology",
        "then",
        "console",
        "log",
        "catch",
        "err",
        "use",
        "json",
        "listen"
      ],
      "mappings": "AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,OAAP,MAAoB,SAApB;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAOC,GAAP,MAAgB,WAAhB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AAEA,MAAMC,GAAG,GAAGJ,OAAO,EAAnB;AACA,MAAMK,IAAI,GAAG,IAAb;AAEAJ,QAAQ,CAACK,OAAT,CAAiBJ,GAAG,CAACK,SAArB,EACE;AACEC,EAAAA,eAAe,EAAE,IADnB;AAEEC,EAAAA,cAAc,EAAE,IAFlB;AAGEC,EAAAA,kBAAkB,EAAE;AAHtB,CADF,EAMGC,IANH,CAMQ,MAAM;AACVC,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACD,CARH,EASGC,KATH,CASUC,GAAD,IAASH,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBE,GAArB,CATlB;AAWEX,GAAG,CAACY,GAAJ,CAAQhB,OAAO,CAACiB,IAAR,EAAR;AACAb,GAAG,CAACY,GAAJ,CAAQ,GAAR,EAAab,UAAb;AAEAC,GAAG,CAACc,MAAJ,CAAWb,IAAX,EAAiB,MAAM;AACrBO,EAAAA,OAAO,CAACC,GAAR,CAAa,oBAAb;AACD,CAFD",
      "sourceRoot": "/Users/edwardsotelojr/Library/Mobile Documents/com~apple~CloudDocs/Juice Houston/juice-houston-backend/",
      "sourcesContent": [
        "\n/*\nconst key = require('./keys.js');\nconst authRouter = require(\"./routes/auth\");\nconst express = require(\"express\");\nconst bodyParser = require(\"body-parser\");\nconst cors = require(\"cors\");\nconst mongoose = require(\"mongoose\");\nconst passport = require('passport');\nconst app = express();\nconst PORT = 8000;\n\napp.use(cors());\napp.use(express.json());\n// root\n// mongo password: pegvI3-puxnok-wymmuc\nmongoose.connect(key.MONGO_URI, {\n  useNewUrlParser: true,\n  useCreateIndex: true,\n  useUnifiedTopology: true,\n}).then(() => {\n  console.log(\"Mongoose Connected. \");\n});\n\nconst connection = mongoose.connection;\n\nconnection.once(\"open\", function () {\n  console.log(\"MongoDB datebase connection established successfully\");\n});\napp.use(\"/\", authRouter);\napp.listen(PORT, () => {\n  console.log(\"Server is running on Port: \" + PORT);\n});\n*/\nimport express from 'express';\nimport mongoose from 'mongoose';\nimport key from './keys.js';\nimport authRouter from './routes/auth.js';\n\nconst app = express();\nconst PORT = 8000;\n\nmongoose.connect(key.MONGO_URI,\n  {\n    useNewUrlParser: true,\n    useCreateIndex: true,\n    useUnifiedTopology: true\n  })\n  .then(() => {\n    console.log(\"Connected\");\n  })\n  .catch((err) => console.log(\"error\", err));\n\n  app.use(express.json());\n  app.use(\"/\", authRouter);\n\n  app.listen(PORT, () => {\n    console.log(`Server started on `);\n  });"
      ]
    },
    "sourceType": "module",
    "mtime": 1618633442064
  }
}